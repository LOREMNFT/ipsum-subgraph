// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class IpsumAdded extends ethereum.Event {
  get params(): IpsumAdded__Params {
    return new IpsumAdded__Params(this);
  }
}

export class IpsumAdded__Params {
  _event: IpsumAdded;

  constructor(event: IpsumAdded) {
    this._event = event;
  }

  get tokenContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get ipsumIdx(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class IpsumUpdated extends ethereum.Event {
  get params(): IpsumUpdated__Params {
    return new IpsumUpdated__Params(this);
  }
}

export class IpsumUpdated__Params {
  _event: IpsumUpdated;

  constructor(event: IpsumUpdated) {
    this._event = event;
  }

  get tokenContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get ipsumIdx(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class IpsumUpdatednsfw extends ethereum.Event {
  get params(): IpsumUpdatednsfw__Params {
    return new IpsumUpdatednsfw__Params(this);
  }
}

export class IpsumUpdatednsfw__Params {
  _event: IpsumUpdatednsfw;

  constructor(event: IpsumUpdatednsfw) {
    this._event = event;
  }

  get tokenContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get ipsumIdx(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class IpsumOFLOREMNFT__IpsumAtResultValue0Struct extends ethereum.Tuple {
  get creator(): Address {
    return this[0].toAddress();
  }

  get nsfw(): boolean {
    return this[1].toBoolean();
  }

  get ownerflip(): boolean {
    return this[2].toBoolean();
  }

  get adminflip(): boolean {
    return this[3].toBoolean();
  }

  get ipsumMetadataURI(): string {
    return this[4].toString();
  }
}

export class IpsumOFLOREMNFT__IpsumForResultValue0Struct extends ethereum.Tuple {
  get creator(): Address {
    return this[0].toAddress();
  }

  get nsfw(): boolean {
    return this[1].toBoolean();
  }

  get ownerflip(): boolean {
    return this[2].toBoolean();
  }

  get adminflip(): boolean {
    return this[3].toBoolean();
  }

  get ipsumMetadataURI(): string {
    return this[4].toString();
  }
}

export class IpsumOFLOREMNFT__tokenIpsumResult {
  value0: Address;
  value1: boolean;
  value2: boolean;
  value3: boolean;
  value4: string;

  constructor(
    value0: Address,
    value1: boolean,
    value2: boolean,
    value3: boolean,
    value4: string
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    return map;
  }

  getCreator(): Address {
    return this.value0;
  }

  getNsfw(): boolean {
    return this.value1;
  }

  getOwnerflip(): boolean {
    return this.value2;
  }

  getAdminflip(): boolean {
    return this.value3;
  }

  getIpsumMetadataURI(): string {
    return this.value4;
  }
}

export class IpsumOFLOREMNFT extends ethereum.SmartContract {
  static bind(address: Address): IpsumOFLOREMNFT {
    return new IpsumOFLOREMNFT("IpsumOFLOREMNFT", address);
  }

  IpsumAt(
    tokenContract: Address,
    tokenId: BigInt,
    startIdx: BigInt,
    endIdx: BigInt
  ): Array<IpsumOFLOREMNFT__IpsumAtResultValue0Struct> {
    let result = super.call(
      "IpsumAt",
      "IpsumAt(address,uint256,uint256,uint256):((address,bool,bool,bool,string)[])",
      [
        ethereum.Value.fromAddress(tokenContract),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(startIdx),
        ethereum.Value.fromUnsignedBigInt(endIdx)
      ]
    );

    return result[0].toTupleArray<IpsumOFLOREMNFT__IpsumAtResultValue0Struct>();
  }

  try_IpsumAt(
    tokenContract: Address,
    tokenId: BigInt,
    startIdx: BigInt,
    endIdx: BigInt
  ): ethereum.CallResult<Array<IpsumOFLOREMNFT__IpsumAtResultValue0Struct>> {
    let result = super.tryCall(
      "IpsumAt",
      "IpsumAt(address,uint256,uint256,uint256):((address,bool,bool,bool,string)[])",
      [
        ethereum.Value.fromAddress(tokenContract),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(startIdx),
        ethereum.Value.fromUnsignedBigInt(endIdx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<IpsumOFLOREMNFT__IpsumAtResultValue0Struct>()
    );
  }

  IpsumFor(
    tokenContract: Address,
    tokenId: BigInt
  ): Array<IpsumOFLOREMNFT__IpsumForResultValue0Struct> {
    let result = super.call(
      "IpsumFor",
      "IpsumFor(address,uint256):((address,bool,bool,bool,string)[])",
      [
        ethereum.Value.fromAddress(tokenContract),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toTupleArray<
      IpsumOFLOREMNFT__IpsumForResultValue0Struct
    >();
  }

  try_IpsumFor(
    tokenContract: Address,
    tokenId: BigInt
  ): ethereum.CallResult<Array<IpsumOFLOREMNFT__IpsumForResultValue0Struct>> {
    let result = super.tryCall(
      "IpsumFor",
      "IpsumFor(address,uint256):((address,bool,bool,bool,string)[])",
      [
        ethereum.Value.fromAddress(tokenContract),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<IpsumOFLOREMNFT__IpsumForResultValue0Struct>()
    );
  }

  IpsumTokenContract(param0: Address): boolean {
    let result = super.call(
      "IpsumTokenContract",
      "IpsumTokenContract(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_IpsumTokenContract(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "IpsumTokenContract",
      "IpsumTokenContract(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  adminSigner(): Address {
    let result = super.call("adminSigner", "adminSigner():(address)", []);

    return result[0].toAddress();
  }

  try_adminSigner(): ethereum.CallResult<Address> {
    let result = super.tryCall("adminSigner", "adminSigner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isCCOtoken(tokenId: BigInt): boolean {
    let result = super.call("isCCOtoken", "isCCOtoken(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_isCCOtoken(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isCCOtoken", "isCCOtoken(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isownerOf(
    tokenContract: Address,
    tokenOwner: Address,
    tokenId: BigInt
  ): boolean {
    let result = super.call(
      "isownerOf",
      "isownerOf(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(tokenContract),
        ethereum.Value.fromAddress(tokenOwner),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toBoolean();
  }

  try_isownerOf(
    tokenContract: Address,
    tokenOwner: Address,
    tokenId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isownerOf",
      "isownerOf(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(tokenContract),
        ethereum.Value.fromAddress(tokenOwner),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  numIpsum(tokenContract: Address, tokenId: BigInt): BigInt {
    let result = super.call("numIpsum", "numIpsum(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(tokenContract),
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_numIpsum(
    tokenContract: Address,
    tokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numIpsum",
      "numIpsum(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenContract),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenIpsum(
    param0: Address,
    param1: BigInt,
    param2: BigInt
  ): IpsumOFLOREMNFT__tokenIpsumResult {
    let result = super.call(
      "tokenIpsum",
      "tokenIpsum(address,uint256,uint256):(address,bool,bool,bool,string)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return new IpsumOFLOREMNFT__tokenIpsumResult(
      result[0].toAddress(),
      result[1].toBoolean(),
      result[2].toBoolean(),
      result[3].toBoolean(),
      result[4].toString()
    );
  }

  try_tokenIpsum(
    param0: Address,
    param1: BigInt,
    param2: BigInt
  ): ethereum.CallResult<IpsumOFLOREMNFT__tokenIpsumResult> {
    let result = super.tryCall(
      "tokenIpsum",
      "tokenIpsum(address,uint256,uint256):(address,bool,bool,bool,string)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IpsumOFLOREMNFT__tokenIpsumResult(
        value[0].toAddress(),
        value[1].toBoolean(),
        value[2].toBoolean(),
        value[3].toBoolean(),
        value[4].toString()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddIpsumCall extends ethereum.Call {
  get inputs(): AddIpsumCall__Inputs {
    return new AddIpsumCall__Inputs(this);
  }

  get outputs(): AddIpsumCall__Outputs {
    return new AddIpsumCall__Outputs(this);
  }
}

export class AddIpsumCall__Inputs {
  _call: AddIpsumCall;

  constructor(call: AddIpsumCall) {
    this._call = call;
  }

  get tokenContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get ipsumMetadataURI(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class AddIpsumCall__Outputs {
  _call: AddIpsumCall;

  constructor(call: AddIpsumCall) {
    this._call = call;
  }
}

export class AddIpsumWithSignatureCall extends ethereum.Call {
  get inputs(): AddIpsumWithSignatureCall__Inputs {
    return new AddIpsumWithSignatureCall__Inputs(this);
  }

  get outputs(): AddIpsumWithSignatureCall__Outputs {
    return new AddIpsumWithSignatureCall__Outputs(this);
  }
}

export class AddIpsumWithSignatureCall__Inputs {
  _call: AddIpsumWithSignatureCall;

  constructor(call: AddIpsumWithSignatureCall) {
    this._call = call;
  }

  get signature(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get tokenContract(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get ipsumIdx(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get ipsumMetadataURI(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class AddIpsumWithSignatureCall__Outputs {
  _call: AddIpsumWithSignatureCall;

  constructor(call: AddIpsumWithSignatureCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetIpsumTokenContractCall extends ethereum.Call {
  get inputs(): SetIpsumTokenContractCall__Inputs {
    return new SetIpsumTokenContractCall__Inputs(this);
  }

  get outputs(): SetIpsumTokenContractCall__Outputs {
    return new SetIpsumTokenContractCall__Outputs(this);
  }
}

export class SetIpsumTokenContractCall__Inputs {
  _call: SetIpsumTokenContractCall;

  constructor(call: SetIpsumTokenContractCall) {
    this._call = call;
  }

  get tokenContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get isListed(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetIpsumTokenContractCall__Outputs {
  _call: SetIpsumTokenContractCall;

  constructor(call: SetIpsumTokenContractCall) {
    this._call = call;
  }
}

export class SetSignerCall extends ethereum.Call {
  get inputs(): SetSignerCall__Inputs {
    return new SetSignerCall__Inputs(this);
  }

  get outputs(): SetSignerCall__Outputs {
    return new SetSignerCall__Outputs(this);
  }
}

export class SetSignerCall__Inputs {
  _call: SetSignerCall;

  constructor(call: SetSignerCall) {
    this._call = call;
  }

  get newSigner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetSignerCall__Outputs {
  _call: SetSignerCall;

  constructor(call: SetSignerCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateIpsumAdminflipCall extends ethereum.Call {
  get inputs(): UpdateIpsumAdminflipCall__Inputs {
    return new UpdateIpsumAdminflipCall__Inputs(this);
  }

  get outputs(): UpdateIpsumAdminflipCall__Outputs {
    return new UpdateIpsumAdminflipCall__Outputs(this);
  }
}

export class UpdateIpsumAdminflipCall__Inputs {
  _call: UpdateIpsumAdminflipCall;

  constructor(call: UpdateIpsumAdminflipCall) {
    this._call = call;
  }

  get tokenContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get ipsumIdx(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get newadminflip(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class UpdateIpsumAdminflipCall__Outputs {
  _call: UpdateIpsumAdminflipCall;

  constructor(call: UpdateIpsumAdminflipCall) {
    this._call = call;
  }
}

export class UpdateIpsumMetadataURICall extends ethereum.Call {
  get inputs(): UpdateIpsumMetadataURICall__Inputs {
    return new UpdateIpsumMetadataURICall__Inputs(this);
  }

  get outputs(): UpdateIpsumMetadataURICall__Outputs {
    return new UpdateIpsumMetadataURICall__Outputs(this);
  }
}

export class UpdateIpsumMetadataURICall__Inputs {
  _call: UpdateIpsumMetadataURICall;

  constructor(call: UpdateIpsumMetadataURICall) {
    this._call = call;
  }

  get tokenContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get ipsumIdx(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get newipsumMetadataURI(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class UpdateIpsumMetadataURICall__Outputs {
  _call: UpdateIpsumMetadataURICall;

  constructor(call: UpdateIpsumMetadataURICall) {
    this._call = call;
  }
}

export class UpdateIpsumOwnerflipCall extends ethereum.Call {
  get inputs(): UpdateIpsumOwnerflipCall__Inputs {
    return new UpdateIpsumOwnerflipCall__Inputs(this);
  }

  get outputs(): UpdateIpsumOwnerflipCall__Outputs {
    return new UpdateIpsumOwnerflipCall__Outputs(this);
  }
}

export class UpdateIpsumOwnerflipCall__Inputs {
  _call: UpdateIpsumOwnerflipCall;

  constructor(call: UpdateIpsumOwnerflipCall) {
    this._call = call;
  }

  get tokenContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get ipsumIdx(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get newownerflip(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class UpdateIpsumOwnerflipCall__Outputs {
  _call: UpdateIpsumOwnerflipCall;

  constructor(call: UpdateIpsumOwnerflipCall) {
    this._call = call;
  }
}

export class UpdateIpsumnsfwCall extends ethereum.Call {
  get inputs(): UpdateIpsumnsfwCall__Inputs {
    return new UpdateIpsumnsfwCall__Inputs(this);
  }

  get outputs(): UpdateIpsumnsfwCall__Outputs {
    return new UpdateIpsumnsfwCall__Outputs(this);
  }
}

export class UpdateIpsumnsfwCall__Inputs {
  _call: UpdateIpsumnsfwCall;

  constructor(call: UpdateIpsumnsfwCall) {
    this._call = call;
  }

  get tokenContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get ipsumIdx(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get newnsfw(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class UpdateIpsumnsfwCall__Outputs {
  _call: UpdateIpsumnsfwCall;

  constructor(call: UpdateIpsumnsfwCall) {
    this._call = call;
  }
}
