// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Ipsum extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Ipsum entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Ipsum must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Ipsum", id.toString(), this);
    }
  }

  static load(id: string): Ipsum | null {
    return changetype<Ipsum | null>(store.get("Ipsum", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get ipsumIdx(): BigInt {
    let value = this.get("ipsumIdx");
    return value!.toBigInt();
  }

  set ipsumIdx(value: BigInt) {
    this.set("ipsumIdx", Value.fromBigInt(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value!.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get ipsumMetadataURI(): string {
    let value = this.get("ipsumMetadataURI");
    return value!.toString();
  }

  set ipsumMetadataURI(value: string) {
    this.set("ipsumMetadataURI", Value.fromString(value));
  }

  get nsfw(): boolean {
    let value = this.get("nsfw");
    return value!.toBoolean();
  }

  set nsfw(value: boolean) {
    this.set("nsfw", Value.fromBoolean(value));
  }

  get ownerflip(): boolean {
    let value = this.get("ownerflip");
    return value!.toBoolean();
  }

  set ownerflip(value: boolean) {
    this.set("ownerflip", Value.fromBoolean(value));
  }

  get adminflip(): boolean {
    let value = this.get("adminflip");
    return value!.toBoolean();
  }

  set adminflip(value: boolean) {
    this.set("adminflip", Value.fromBoolean(value));
  }

  get createdAtTimeStamp(): BigInt {
    let value = this.get("createdAtTimeStamp");
    return value!.toBigInt();
  }

  set createdAtTimeStamp(value: BigInt) {
    this.set("createdAtTimeStamp", Value.fromBigInt(value));
  }
}

export class addIpsum extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save addIpsum entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type addIpsum must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("addIpsum", id.toString(), this);
    }
  }

  static load(id: string): addIpsum | null {
    return changetype<addIpsum | null>(store.get("addIpsum", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get ipsumIdx(): BigInt {
    let value = this.get("ipsumIdx");
    return value!.toBigInt();
  }

  set ipsumIdx(value: BigInt) {
    this.set("ipsumIdx", Value.fromBigInt(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value!.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get createdAtTimeStamp(): BigInt {
    let value = this.get("createdAtTimeStamp");
    return value!.toBigInt();
  }

  set createdAtTimeStamp(value: BigInt) {
    this.set("createdAtTimeStamp", Value.fromBigInt(value));
  }
}

export class flapNSFW extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save flapNSFW entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type flapNSFW must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("flapNSFW", id.toString(), this);
    }
  }

  static load(id: string): flapNSFW | null {
    return changetype<flapNSFW | null>(store.get("flapNSFW", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get ipsumIdx(): BigInt {
    let value = this.get("ipsumIdx");
    return value!.toBigInt();
  }

  set ipsumIdx(value: BigInt) {
    this.set("ipsumIdx", Value.fromBigInt(value));
  }

  get modifier(): Bytes {
    let value = this.get("modifier");
    return value!.toBytes();
  }

  set modifier(value: Bytes) {
    this.set("modifier", Value.fromBytes(value));
  }
}
